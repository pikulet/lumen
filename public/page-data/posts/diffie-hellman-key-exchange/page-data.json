{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/diffie-hellman-key-exchange","result":{"data":{"markdownRemark":{"id":"2469a6bd-9274-5c52-885e-f71b455335a4","html":"<h2 id=\"key-exchange-protocols\" style=\"position:relative;\"><a href=\"#key-exchange-protocols\" aria-label=\"key exchange protocols permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Key Exchange Protocols</h2>\n<p>When the internet first started, universities and research institutes would lay cables from one end to the other. No communication would pass by another eavesdropper, as the very cables were secured. However, when the modern internet involved, packets were sent everywhere. To visit a website hosted in America (e.g. Netflix), the packet would pass through many routers based in many countries. How then, can any communication be secure if no secure channel can be established?</p>\n<p>In most cryptographic communication, both communicating parties (Alice and Bob) need to know a shared secret. This way, any messages encrypted using this secret key cannot be decrypted by malicious listeners. However, before the communication can be encrypted using the key, Alice and Bob need to decide on the secret key that they will be using. During this decision process, the communication channel is still insecure and susceptible to eavesdropping.</p>\n<p>For instance, Alice cannot simply tell Bob that the key will be 81729312 as eavesdroppers will also know the key. Key Exchange Protocols are designed to allow Alice and Bob to agree on a shared secret key even with an eavesdropper present. One class of key exchange protocols is the <strong>Diffie-Hellman Key Exchange</strong>.</p>\n<h2 id=\"diffie-hellman-protocol\" style=\"position:relative;\"><a href=\"#diffie-hellman-protocol\" aria-label=\"diffie hellman protocol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Diffie-Hellman Protocol</h2>\n<p>The mathematical solution of the Diffie-Hellman Key Exchange is elegant. Two parties exchange messages with each other in public, much like two people talking to each other in public. At the end of the protocol, they can decide on a shared key that no one else knows. The important factor is that information is not exactly shared during the exchange – <strong>information is created</strong>.</p>\n<p>Having precise assumptions in cryptography is important. These assumptions become the only uncertainty in the cryptosystem. <strong>Mathematically intractable</strong> problems form the basis of most modern cryptosystems.</p>\n<p>Underlying assumptions should be precisely stated (for instance, that factoring prime numbers is difficult). The DH protocol is based so strongly on the proof of hardness of a mathematical problem that if one day, a new algorithm would solve it easily, then the Diffie-Hellman protocol would be insecure. Being able to <strong>reduce</strong> an entire protocol to a mathematical problem makes for an easy way to quantify the security of the protocol. </p>\n<h3 id=\"cyclic-groups\" style=\"position:relative;\"><a href=\"#cyclic-groups\" aria-label=\"cyclic groups permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cyclic Groups</h3>\n<p>Diffie-Hellman mathematics is based on operations in cyclic groups. We first give an introduction to cyclic groups. Consider a generator <code class=\"language-text\">g</code> and a modulus <code class=\"language-text\">n</code>. The group <code class=\"language-text\">&lt;g></code> is defined as <code class=\"language-text\">&lt;g, g², g³, ..., > modulus n</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Example: g = 3, n = 23, \n\nthen &lt;g> \n= &lt;3, 3² mod 23, 3³ mod 23 ... > \n= &lt;3, 9 mod 23, 27 mod 23 ... > \n= &lt; 3, 9, 4, 12, 13, 16, 2, 6, 18, 8, 1 > </code></pre></div>\n<p>Note that the group <code class=\"language-text\">&lt;g></code> is <strong>finite</strong> (order = <code class=\"language-text\">11</code> elements) because the operations are done over modulus <code class=\"language-text\">n</code>. The maximum number of elements in the group is <code class=\"language-text\">n</code>.</p>\n<h3 id=\"diffie-hellman-problems\" style=\"position:relative;\"><a href=\"#diffie-hellman-problems\" aria-label=\"diffie hellman problems permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Diffie-Hellman Problems</h3>\n<p>To help relate group mathematics with the applications of the Diffie-Hellman Key Exchange Protocol, we first formulate a few mathematical problems.</p>\n<p><strong>Discrete Logarithm (DL) Problem</strong></p>\n<blockquote>\n<p>Given <code class=\"language-text\">x</code>, find <code class=\"language-text\">r</code> such that <code class=\"language-text\">x</code> = <code class=\"language-text\">gʳ</code>. Example: Let <code class=\"language-text\">g = 3</code>, in modulus <code class=\"language-text\">23</code>. Given <code class=\"language-text\">x = 8</code>, find <code class=\"language-text\">r</code> such that <code class=\"language-text\">8 = 3ʳ mod 23</code>.</p>\n</blockquote>\n<p>Since we have already generated the whole group earlier, we get r = 10. However, it is generally difficult to compute <code class=\"language-text\">r</code> without generating the entire group.</p>\n<p><strong>Computational Diffie-Hellman (CDH) Problem</strong></p>\n<blockquote>\n<p>Given <code class=\"language-text\">gᵃ</code> and <code class=\"language-text\">gᵇ</code>, find <code class=\"language-text\">gᵃᵇ</code>. Example: Let <code class=\"language-text\">g = 3</code>, in modulus <code class=\"language-text\">23</code>. Given <code class=\"language-text\">3ᵃ = 4</code>, <code class=\"language-text\">3ᵇ = 16</code>, find <code class=\"language-text\">3ᵃᵇ</code>.</p>\n</blockquote>\n<p>First, we solve for <code class=\"language-text\">a = 3</code> and <code class=\"language-text\">b = 6</code>. Then,</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">3ᵃᵇ\n= 3¹⁸ \n= 3⁽¹¹⁺⁷⁾\n= 3¹¹ (3⁷) \n= 1 (3⁷) (mod 23)\n= 2 (mod 23)</code></pre></div>\n<p>Notice that we solved the DL problem to solve the CDH problem. Hence, DL is easy => CDH is easy.</p>\n<p><strong>Decisional Diffie-Hellman (DDH) Problem</strong></p>\n<blockquote>\n<p>Given <code class=\"language-text\">gᵃ</code>, <code class=\"language-text\">gᵇ</code>, distinguish between a random <code class=\"language-text\">gᶜ</code> and <code class=\"language-text\">gᵃᵇ</code>. Example: Let <code class=\"language-text\">g = 3</code>, in modulus <code class=\"language-text\">23</code>. Given <code class=\"language-text\">3ᵃ = 4</code>, <code class=\"language-text\">3ᵇ = 12</code>. Now, given <code class=\"language-text\">8</code> and <code class=\"language-text\">3</code>, decide which is <code class=\"language-text\">gᵃᵇ</code> and which is <code class=\"language-text\">gᶜ</code>.</p>\n</blockquote>\n<p>We first solve for <code class=\"language-text\">a = 3</code> and <code class=\"language-text\">b = 4</code>, <code class=\"language-text\">3ᵃᵇ = 3¹² = 3¹¹ (3) = 3</code>. Hence <code class=\"language-text\">3 = 3ᵃᵇ</code> and <code class=\"language-text\">8 = gᶜ</code>.  We solved the CDH problem to solve the DDH problem. Hence, CDH is easy => DDH is easy.</p>\n<p>By comparing the three problems, we have that <code class=\"language-text\">DL easy => CDH easy => DDH easy</code>. If we can efficiently calculate the discrete logarithm in a cyclic group, then we can also solve the CDH and DDH problems in that group. Considering the <em>contrapositive</em>, we have that <code class=\"language-text\">DDH hard => CDH hard => DL hard</code>.</p>\n<p>A group where the DDH problem is hard would be ideal for all cryptographic schemes relying on either the DDH, CDH or DL problems. CDH and DL would also be difficult in the group. However, we may not need such a powerful group satisfying all the mathematical assumptions. We only need a group that satisfies the DL intractability.</p>\n<h3 id=\"putting-everything-together\" style=\"position:relative;\"><a href=\"#putting-everything-together\" aria-label=\"putting everything together permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Putting Everything Together</h3>\n<p>Precisely defining the Diffie-Hellman problems gave us a means to specify the mathematical assumptions made in designing the key exchange protocol.</p>\n<p>In the Diffie-Hellman Key Exchange, the following events take place:</p>\n<ol>\n<li>Alice and Bob establish <code class=\"language-text\">g</code> and a modulus <code class=\"language-text\">n</code>, which is public. This defines the cyclic group.</li>\n<li>Alice and Bob each have a personal secret, <code class=\"language-text\">a</code> and <code class=\"language-text\">b</code>.</li>\n<li>Alice sends Bob <code class=\"language-text\">A = gᵃ</code> and Bob calculates <code class=\"language-text\">K = gᵃᵇ = Aᵇ</code>. Bob now has the key <code class=\"language-text\">K</code>.</li>\n<li>Bob sends Alice <code class=\"language-text\">B = gᵇ</code> and Alice calculates <code class=\"language-text\">K = gᵃᵇ = Bᵃ</code>. Alice now has the key <code class=\"language-text\">K</code>.</li>\n</ol>\n<p>Since the communication is still not encrypted, any eavesdropper can retrieve everything that Alice and Bob sent to each other: <code class=\"language-text\">g</code>, <code class=\"language-text\">n</code>, <code class=\"language-text\">A = gᵃ</code> and <code class=\"language-text\">B = gᵇ</code>. Given these values, the eavesdropper must find the key <code class=\"language-text\">K = gᵃᵇ</code>. This description is exactly the <strong>CDH problem</strong>. Minimally, we must use a mathematical group where the CDH problem is hard. We do not necessarily need a DDH-hard group, just a CDH-hard group.</p>\n<p>A classic example of a group that is CDH-hard but not DDH-hard are the <code class=\"language-text\">Zₚ*</code> groups. Let <code class=\"language-text\">p</code> be a prime number, then <code class=\"language-text\">Zₚ* = { 1, 2, 3, 4, 5, ... , p - 1 }</code>.</p>\n<p>Diffie-Hellman problems form the cryptographic foundation for many other applications, not just the key exchange protocol. However, if a cryptosystem scheme is designed based on the DDH problem, then the users must ensure that the DDH problem is hard in the cyclic group used.</p>\n<h3 id=\"attacking-the-diffie-hellman-key-exchange\" style=\"position:relative;\"><a href=\"#attacking-the-diffie-hellman-key-exchange\" aria-label=\"attacking the diffie hellman key exchange permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Attacking the Diffie-Hellman Key Exchange</h3>\n<p>However, in modern communication channels, eavesdropping is not the only problem. A CDH-hard group can only protect the key exchange from an eavesdropper. Attackers have other capabilities, such as interception.</p>\n<p>A middleman can create a new secret <code class=\"language-text\">c</code> and calculate <code class=\"language-text\">gᶜ</code>.</p>\n<ul>\n<li>When Alice sends <code class=\"language-text\">gᵃ</code>, <code class=\"language-text\">M</code> intercepts it and sends Alice <code class=\"language-text\">gᶜ</code>. Alice communicates with <code class=\"language-text\">M</code> using <code class=\"language-text\">K₁ = gᵃᶜ</code>.</li>\n<li>When Bob sends <code class=\"language-text\">gᵇ</code>, <code class=\"language-text\">M</code> intercepts it and sends Bob <code class=\"language-text\">gᶜ</code>. Bob communicates with <code class=\"language-text\">M</code> using <code class=\"language-text\">K₂ = gᵇᶜ</code>.</li>\n</ul>\n<p>Alice will think that she is communicating with Bob using <code class=\"language-text\">K₁</code>. Bob will think he is talking to Alice using <code class=\"language-text\">K₂</code>.</p>\n<p>The problem is that the Diffie-Hellman Key Exchange protocol was never designed for authentication. The identities of both parties are never established. Even without the presence of <code class=\"language-text\">M</code>, Alice cannot confidently ascertain that the person she is talking to is indeed Bob. Authentication protocols can be used to establish that <code class=\"language-text\">gᵇ</code> was indeed generated by the person Bob, such as using certificates for verification.</p>\n<h2 id=\"remarks\" style=\"position:relative;\"><a href=\"#remarks\" aria-label=\"remarks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Remarks</h2>\n<p>In reality, key exchange protocols like the SSL handshake being used to establish an encryption with the bank is a more complicated. Hopefully, this article has given the reader a brief understanding of the topic.</p>","fields":{"slug":"/posts/diffie-hellman-key-exchange","tagSlugs":["/tag/cryptography/"]},"frontmatter":{"date":"2023-01-10","description":"Diffie-Hellman Key Exchange Protocol","tags":["cryptography"],"title":"Diffie-Hellman Key Exchange Protocol"}}},"pageContext":{"slug":"/posts/diffie-hellman-key-exchange"}},"staticQueryHashes":["251939775","3439816877","401334301"]}